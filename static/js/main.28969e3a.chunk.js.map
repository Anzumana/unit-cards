{"version":3,"sources":["components/Card/CardTable.tsx","components/Card/CardFlags.tsx","fixtures/unitStats.ts","fixtures/traits.ts","components/Card/Card.tsx","fixtures/units.ts","components/StatForm/StatForm.tsx","utils/statCalculator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["positive","num","Math","sign","CardTable","_ref","size","attack","defense","power","toughness","morale","react_default","a","createElement","className","AncestryFlag","experience","xmlns","viewBox","fill","d","includes","TypeFlag","_ref2","equipment","CardFlags","_ref3","ancestry","type","Fragment","CardFlags_AncestryFlag","CardFlags_TypeFlag","ancestryStats","_ancestryStats","Bugbear","traits","Dragonborn","Dwarf","Elf","Object","defineProperty","experienceStats","Green","Regular","Seasoned","Veteran","Elite","equipmentStats","Light","Medium","Heavy","typeStats","_typeStats","Levies","costMultiplier","Infantry","Cavalry","sizeStats","d4","d6","d8","d10","d12","traitData","name","cost","description","Trait","trait","Charge","Card_Trait","find","data","AlwaysDiminished","Card","_Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props$cardData","props","cardData","id","CardFlags_CardFlags","CardTable_CardTable","length","map","t","Card_Charge","Card_AlwaysDiminished","Component","unitAncestries","unitTypes","unitExperiences","unitEquipments","unitSizes","StatForm","state","update","onChange","e","target","currentTarget","disabled","baseless","forEach","traitName","round","App","objectSpread","_this","_this2","StatForm_StatForm_StatForm","setState","Card_Card_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28969e3a.chunk.js","sourcesContent":["import React from 'react';\nimport { CardStats } from '../../types/units';\n\nconst positive = (num: number): string => (Math.sign(num) >= 0 ? '+' : '');\nexport const CardTable = ({\n  size,\n  attack,\n  defense,\n  power,\n  toughness,\n  morale,\n}: CardStats) => (\n  <table className=\"card-table\">\n    <tbody>\n      <tr>\n        <td>Attack:</td>\n        <td className=\"text-right pad-right\">\n          {positive(attack)}\n          {attack}\n        </td>\n        <td>Defense:</td>\n        <td className=\"text-right\">{defense}</td>\n      </tr>\n      <tr>\n        <td>Power:</td>\n        <td className=\"text-right pad-right\">\n          {positive(power)}\n          {power}\n        </td>\n        <td>Toughness:</td>\n        <td className=\"text-right\">{toughness}</td>\n      </tr>\n      <tr>\n        <td>Morale:</td>\n        <td className=\"text-right pad-right\">\n          {positive(morale)}\n          {morale}\n        </td>\n        <td>Size:</td>\n        <td className=\"text-right text-transform-none\">1{size}</td>\n      </tr>\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport './Card.css';\nimport {\n  UnitAncestry,\n  UnitType,\n  UnitEquipment,\n  UnitExperience,\n} from '../../types/units';\n\ninterface Props {\n  ancestry: UnitAncestry;\n  type: UnitType;\n  equipment: UnitEquipment;\n  experience: UnitExperience;\n}\nconst AncestryFlag = ({ experience }: { experience: UnitExperience }) => (\n  <div className=\"card-flag\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"207.116 0 197.769 792\">\n      <path\n        fill=\"#db1a21\"\n        d=\"M354.056 0v36.966h-96.112V0h-50.828V534.161L306 475.939l98.885 58.222V0z\"\n      />\n      {['Regular', 'Seasoned', 'Veteran', 'Elite', 'Super-Elite'].includes(\n        experience,\n      ) ? (\n        <path\n          fill=\"#8dc63f\"\n          d=\"M404.885 574.824L306 517.526l-98.884 57.298V551.72L306 494.423l98.885 57.297z\"\n        />\n      ) : null}\n      {['Seasoned', 'Veteran', 'Elite', 'Super-Elite'].includes(experience) ? (\n        <path\n          fill=\"#cbdb2a\"\n          d=\"M404.885 613.639L306 556.341l-98.884 57.298v-23.105L306 533.237l98.885 57.297z\"\n        />\n      ) : null}\n      {['Veteran', 'Elite', 'Super-Elite'].includes(experience) ? (\n        <path\n          fill=\"#ebd417\"\n          d=\"M404.885 653.377L306 596.079l-98.884 57.298v-23.104L306 572.976l98.885 57.297z\"\n        />\n      ) : null}\n      {['Elite', 'Super-Elite'].includes(experience) ? (\n        <path\n          fill=\"#ffc20e\"\n          d=\"M404.885 692.191L306 634.894l-98.884 57.297v-23.103L306 611.79l98.885 57.298z\"\n        />\n      ) : null}\n      {['Super-Elite'].includes(experience) ? (\n        <path\n          fill=\"#ffc20e\"\n          d=\"M306 666.315l11.09 23.104 24.952 2.772-17.559 18.484 3.697 24.952L306 723.612l-23.104 12.015 4.621-24.952-18.483-18.484 25.876-2.772zM269.034 727.31l10.166 21.254 24.028 2.773-17.56 16.635L290.29 792l-21.256-11.09L247.778 792l3.697-24.028-16.635-16.635 23.104-2.773zM342.966 727.31l10.166 21.254 24.028 2.773-17.559 16.635L364.222 792l-21.256-11.09L321.711 792l3.696-24.028-16.635-16.635 24.029-2.773z\"\n        />\n      ) : null}\n    </svg>\n  </div>\n);\n\nconst TypeFlag = ({ equipment }: { equipment: UnitEquipment }) => (\n  <div className=\"card-flag\">\n    {equipment === 'Light' ? (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 21.4 66.8\">\n        <path\n          fill=\"#001522\"\n          d=\"M10.7 66.8L21.2 5.5l.2-1.4V0h-5.5v4.1H5.5V0H0v4.1l.2 1.4z\"\n        />\n      </svg>\n    ) : equipment === 'Medium' ? (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 21.4 72.6\">\n        <path d=\"M15.9 0v3.3H5.5V0H0v5.5l1.5 67.1 6.9-17.5 2.3-6 2.3 6 6.9 17.5 1.5-67.1V0z\" />\n      </svg>\n    ) : equipment === 'Heavy' ? (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 21.4 79.6\">\n        <path d=\"M15.9 0v4.1H5.5V0H0v5.5l1.5 74.1 4.6-29.4 4.6 29.4 4.6-29.4 4.6 29.4 1.5-74.1V0h-5.5z\" />\n      </svg>\n    ) : equipment === 'Super-Heavy' ? (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 21.4 80.5\">\n        <path d=\"M15.9 0v3.3H5.5V0H0v5.5l1.5 75 4.6-1.9 4.6 1.9 4.6-1.9 4.6 1.9 1.5-75V0h-5.5z\" />\n      </svg>\n    ) : null}\n  </div>\n);\nexport const CardFlags = ({ ancestry, type, equipment, experience }: Props) => (\n  <>\n    <AncestryFlag experience={experience} />\n    <TypeFlag equipment={equipment} />\n  </>\n);\n","import { UnitAncestry } from '../types/units';\nimport { Trait } from '../types/traits';\n\ninterface StatBlock {\n  attack: number;\n  power: number;\n  defense: number;\n  toughness: number;\n  morale: number;\n}\n\ninterface AncestryStatBlock extends StatBlock {\n  traits: Trait[];\n}\nexport const ancestryStats: { [k: string]: AncestryStatBlock } = {\n  Bugbear: {\n    attack: 2,\n    power: 0,\n    defense: 0,\n    toughness: 0,\n    morale: 1,\n    traits: ['Martial'],\n  },\n  Dragonborn: {\n    attack: 2,\n    power: 2,\n    defense: 1,\n    toughness: 1,\n    morale: 2,\n    traits: ['Courageous'],\n  },\n  Dwarf: {\n    attack: 3,\n    power: 1,\n    defense: 1,\n    toughness: 1,\n    morale: 2,\n    traits: ['Stalwart'],\n  },\n  Elf: {\n    attack: 2,\n    power: 0,\n    defense: 0,\n    toughness: 0,\n    morale: 1,\n    traits: ['Eternal'],\n  },\n  ['Elven (Winged)']: {\n    attack: 1,\n    power: 1,\n    defense: 0,\n    toughness: 0,\n    morale: 1,\n    traits: ['Eternal'],\n  },\n  Ghoul: {\n    attack: -1,\n    power: 0,\n    defense: 2,\n    toughness: 2,\n    morale: 0,\n    traits: ['Undead', 'Horrify', 'Ravenous'],\n  },\n  Gnoll: {\n    attack: 2,\n    power: 0,\n    defense: 0,\n    toughness: 0,\n    morale: 1,\n    traits: ['Frenzy'],\n  },\n  Gnome: {\n    attack: 1,\n    power: -1,\n    defense: 1,\n    toughness: -1,\n    morale: 1,\n    traits: [],\n  },\n  Goblin: {\n    attack: -1,\n    power: -1,\n    defense: 1,\n    toughness: -1,\n    morale: 0,\n    traits: [],\n  },\n  Hobgoblin: {\n    attack: 2,\n    power: 0,\n    defense: 0,\n    toughness: 0,\n    morale: 1,\n    traits: ['Bred for war', 'Martial'],\n  },\n  Human: {\n    attack: 2,\n    power: 0,\n    defense: 0,\n    toughness: 0,\n    morale: 1,\n    traits: ['Courageous'],\n  },\n  Kobold: {\n    attack: -1,\n    power: -1,\n    defense: 1,\n    toughness: -1,\n    morale: -1,\n    traits: [],\n  },\n  Lizardfolk: {\n    attack: 2,\n    power: 1,\n    defense: -1,\n    toughness: 1,\n    morale: 1,\n    traits: ['Amphibious'],\n  },\n  Ogre: {\n    attack: 0,\n    power: 2,\n    defense: 0,\n    toughness: 2,\n    morale: 1,\n    traits: ['Brutal'],\n  },\n  Orc: {\n    attack: 2,\n    power: 1,\n    defense: 1,\n    toughness: 1,\n    morale: 2,\n    traits: ['Savage'],\n  },\n  Skeleton: {\n    attack: -2,\n    power: -1,\n    defense: 1,\n    toughness: 1,\n    morale: 1,\n    traits: ['Undead', 'Mindless'],\n  },\n  Treant: {\n    attack: 0,\n    power: 2,\n    defense: 0,\n    toughness: 2,\n    morale: 0,\n    traits: ['Twisting Roots', 'Rock-hurler'],\n  },\n  Troll: {\n    attack: 0,\n    power: 2,\n    defense: 0,\n    toughness: 2,\n    morale: 0,\n    traits: ['Regenerate'],\n  },\n  Zombie: {\n    attack: -2,\n    power: 0,\n    defense: 2,\n    toughness: 2,\n    morale: 2,\n    traits: ['Undead', 'Mindless'],\n  },\n};\n\nexport const experienceStats: { [k: string]: StatBlock } = {\n  Green: {\n    attack: 0,\n    power: 0,\n    defense: 0,\n    toughness: 0,\n    morale: 0,\n  },\n  Regular: {\n    attack: 1,\n    power: 0,\n    defense: 0,\n    toughness: 1,\n    morale: 1,\n  },\n  Seasoned: {\n    attack: 1,\n    power: 0,\n    defense: 0,\n    toughness: 1,\n    morale: 2,\n  },\n  Veteran: {\n    attack: 1,\n    power: 0,\n    defense: 0,\n    toughness: 1,\n    morale: 3,\n  },\n  Elite: {\n    attack: 2,\n    power: 0,\n    defense: 0,\n    toughness: 2,\n    morale: 4,\n  },\n  ['Super-Elite']: {\n    attack: 2,\n    power: 0,\n    defense: 0,\n    toughness: 2,\n    morale: 5,\n  },\n};\n\nexport const equipmentStats: { [k: string]: StatBlock } = {\n  Light: {\n    attack: 0,\n    power: 1,\n    defense: 1,\n    toughness: 0,\n    morale: 0,\n  },\n  Medium: {\n    attack: 0,\n    power: 2,\n    defense: 2,\n    toughness: 0,\n    morale: 0,\n  },\n  Heavy: {\n    attack: 0,\n    power: 4,\n    defense: 4,\n    toughness: 0,\n    morale: 0,\n  },\n  ['Super-Heavy']: {\n    attack: 0,\n    power: 6,\n    defense: 6,\n    toughness: 0,\n    morale: 0,\n  },\n};\n\ninterface TypeStatBlock extends StatBlock {\n  costMultiplier: number;\n}\nexport const typeStats: { [k: string]: TypeStatBlock } = {\n  Levies: {\n    attack: 0,\n    power: 0,\n    defense: 0,\n    toughness: 0,\n    morale: -1,\n    costMultiplier: 0.75,\n  },\n  Infantry: {\n    attack: 0,\n    power: 0,\n    defense: 1,\n    toughness: 1,\n    morale: 0,\n    costMultiplier: 1,\n  },\n  Cavalry: {\n    attack: 1,\n    power: 1,\n    defense: 0,\n    toughness: 0,\n    morale: 2,\n    costMultiplier: 1.5,\n  },\n  ['Siege Engine']: {\n    attack: 1,\n    power: 1,\n    defense: 0,\n    toughness: 1,\n    morale: 0,\n    costMultiplier: 1.5,\n  },\n  Archers: {\n    attack: 0,\n    power: 1,\n    defense: 0,\n    toughness: 0,\n    morale: 1,\n    costMultiplier: 1.75,\n  },\n  Flying: {\n    attack: 0,\n    power: 0,\n    defense: 0,\n    toughness: 0,\n    morale: 3,\n    costMultiplier: 2,\n  },\n};\n\ninterface SizeStatBlock {\n  costMultiplier: number;\n}\nexport const sizeStats: { [k: string]: SizeStatBlock } = {\n  d4: { costMultiplier: 0.66 },\n  d6: { costMultiplier: 1 },\n  d8: { costMultiplier: 1.33 },\n  d10: { costMultiplier: 1.66 },\n  d12: { costMultiplier: 2 },\n};\n","import { Trait } from '../types/traits';\n\nexport interface TraitData {\n  name: Trait;\n  cost: number;\n  description: string;\n}\nexport const traitData: TraitData[] = [\n  {\n    name: 'Amphibious',\n    cost: 50,\n    description:\n      'This unit does not suffer terrain penalties for fighting in water or on land.',\n  },\n  {\n    name: 'Bred for war',\n    cost: 100,\n    description:\n      'This unit cannot be diminished, and cannot have disadvantage on morale checks.',\n  },\n  {\n    name: 'Brutal',\n    cost: 200,\n    description: 'This unit inflicts 2 casualties on a successful power check.',\n  },\n  {\n    name: 'Courageous',\n    cost: 50,\n    description:\n      'Once per battle, this unit can choose to succeed on a morale check it just failed.',\n  },\n  {\n    name: 'Eternal',\n    cost: 50,\n    description:\n      'This unit cannot be horrified, and it always succeeds on morale checks to attack undead and fiends.',\n  },\n  {\n    name: 'Frenzy',\n    cost: 50,\n    description:\n      'If this unit diminishes an enemy unit, it immediately makes a free attack against that unit.',\n  },\n  {\n    name: 'Horrify',\n    cost: 200,\n    description:\n      'If this unit inflicts a casualty on an enemy unit, that unit must make a dc 15 morale check.Failure exhausts the unit.',\n  },\n  {\n    name: 'Martial',\n    cost: 100,\n    description:\n      'If this unit succeeds on a power check and its size is greater than the defending unit, it inflicts 2 casualties.',\n  },\n  {\n    name: 'Mindless',\n    cost: 100,\n    description: 'This unit cannot fail morale checks.',\n  },\n  {\n    name: 'Regenerate',\n    cost: 200,\n    description:\n      'When this unit refreshes, increment its casualty die.This trait ceases to function if the unit suffers a casualty from battle magic.',\n  },\n  {\n    name: 'Ravenous',\n    cost: 50,\n    description:\n      'While any enemy unit is diminished, this unit can spend a round feeding on the corpses to increment their casualty die. ',\n  },\n  {\n    name: 'Rock-hurler',\n    cost: 250,\n    description:\n      'If this unit succeeds on an attack check, it inflicts 2 casualties.Against fortifications, it inflicts 1d6 casualties.',\n  },\n  {\n    name: 'Savage',\n    cost: 50,\n    description:\n      'This unit has advantage on the first attack check it makes each battle.',\n  },\n  {\n    name: 'Stalwart',\n    cost: 50,\n    description:\n      'Enemy battle magic has disadvantage on power checks against this unit.',\n  },\n  {\n    name: 'Twisting Roots',\n    cost: 200,\n    description:\n      'As an action, this unit can sap the walls of a fortification.Siege units have advantage on power checks against sapped fortifications.',\n  },\n  {\n    name: 'Undead',\n    cost: 50,\n    description:\n      'Green and regular troops must pass a morale check to attack this unit.Each enemy unit need only do this once.',\n  },\n  {\n    name: 'Charge',\n    description:\n      'Cannot use while engaged. A Charge is an attack with advantage on the Attack check.It inflicts 2 casualties on a successful Power check.The charging unit is then engaged with the defending unit and must make a DC 13 Morale check to disengage.',\n    cost: 0,\n  },\n  {\n    name: 'Always Diminished',\n    description: 'This unit it always diminished.',\n    cost: 0,\n  },\n];\n","import React, { Component } from 'react';\nimport './Card.css';\nimport { CardData } from '../../types/units';\nimport { CardTable } from './CardTable';\nimport { CardFlags } from './CardFlags';\nimport { ancestryStats } from '../../fixtures/unitStats';\nimport { traitData, TraitData } from '../../fixtures/traits';\n\ninterface Props {\n  cardData: CardData;\n}\n\nconst Trait = ({ trait }: { trait: TraitData | undefined }) => (\n  <div>\n    {trait ? (\n      <>\n        <b>{trait.name}</b>. {trait.description}\n      </>\n    ) : null}\n  </div>\n);\n\nconst Charge = () => (\n  <Trait trait={traitData.find((data) => data.name === 'Charge')} />\n);\nconst AlwaysDiminished = () => (\n  <Trait trait={traitData.find((data) => data.name === 'Always Diminished')} />\n);\n\n//TODO. Cost.\nexport class Card extends Component<Props> {\n  render() {\n    const {\n      name,\n      ancestry,\n      experience,\n      equipment,\n      type,\n      size,\n      attack,\n      defense,\n      power,\n      toughness,\n      morale,\n      cost,\n    } = this.props.cardData;\n\n    return (\n      <div className=\"card\" id=\"card\">\n        <div className=\"card-inner\">\n          <div className=\"card-flags\">\n            <CardFlags\n              ancestry={ancestry}\n              type={type}\n              experience={experience}\n              equipment={equipment}\n            />\n          </div>\n          <div className=\"card-top\">\n            <div className=\"card-name\">{name}</div>\n            {type === 'Levies' ? (\n              <div className=\"card-type\">\n                {ancestry} {type}\n              </div>\n            ) : (\n              <div className=\"card-type\">\n                {ancestry} {experience}\n                <br />\n                {equipment} {type}\n              </div>\n            )}\n          </div>\n          <div className=\"card-main\">\n            <div className=\"card-cost\">Cost: {cost ? cost : '-'}</div>\n            <CardTable\n              size={size}\n              attack={attack}\n              defense={defense}\n              power={power}\n              toughness={toughness}\n              morale={morale}\n            />\n            {ancestryStats[ancestry].traits.length ||\n            type === 'Cavalry' ||\n            type === 'Levies' ? (\n              <>\n                <div className=\"card-traits\">Traits</div>\n\n                {ancestryStats[ancestry].traits.map((trait) => (\n                  <Trait trait={traitData.find((t) => t.name === trait)} />\n                ))}\n              </>\n            ) : null}\n            {type === 'Cavalry' && <Charge />}\n            {type === 'Levies' && <AlwaysDiminished />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import {\n  UnitSize,\n  UnitEquipment,\n  UnitExperience,\n  UnitType,\n  UnitAncestry,\n} from '../types/units';\n\nexport const unitAncestries: UnitAncestry[] = [\n  'Bugbear',\n  'Dragonborn',\n  'Dwarf',\n  'Elf',\n  'Elven (Winged)',\n  'Ghoul',\n  'Gnoll',\n  'Gnome',\n  'Goblin',\n  'Hobgoblin',\n  'Human',\n  'Kobold',\n  'Lizardfolk',\n  'Ogre',\n  'Orc',\n  'Skeleton',\n  'Treant',\n  'Troll',\n  'Zombie',\n];\nexport const unitTypes: UnitType[] = [\n  'Flying',\n  'Archers',\n  'Cavalry',\n  'Levies',\n  'Infantry',\n  'Siege Engine',\n];\nexport const unitExperiences: UnitExperience[] = [\n  'Green',\n  'Regular',\n  'Seasoned',\n  'Veteran',\n  'Elite',\n  'Super-Elite',\n];\nexport const unitEquipments: UnitEquipment[] = [\n  'Light',\n  'Medium',\n  'Heavy',\n  'Super-Heavy',\n];\nexport const unitSizes: UnitSize[] = ['d4', 'd6', 'd8', 'd10', 'd12'];\n","import React from 'react';\nimport './StatForm.css';\nimport { State } from '../../App';\nimport {\n  UnitAncestry,\n  UnitType,\n  UnitExperience,\n  UnitEquipment,\n  UnitSize,\n} from '../../types/units';\nimport {\n  unitAncestries,\n  unitTypes,\n  unitExperiences,\n  unitEquipments,\n  unitSizes,\n} from '../../fixtures/units';\n\ninterface Props {\n  state: State;\n  update: (i: Partial<State>) => void;\n}\nexport const StatForm = ({ state, update }: Props) => (\n  <div className=\"stat-form\">\n    <div className=\"form-control\">\n      <label>Name</label>\n      <input\n        type=\"text\"\n        value={state.name}\n        onChange={(e) => update({ name: e.target.value })}\n      />\n    </div>\n    <div className=\"form-control\">\n      <label>Ancestry</label>\n      <select\n        value={state.ancestry}\n        onChange={(e) =>\n          update({\n            ancestry: e.currentTarget.value as UnitAncestry,\n          })\n        }\n      >\n        {unitAncestries.map((value) => (\n          <option value={value} key={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </div>\n    <div className=\"form-control\">\n      <label>Type</label>\n      <select\n        value={state.type}\n        onChange={(e) => update({ type: e.currentTarget.value as UnitType })}\n      >\n        {unitTypes.map((value) => (\n          <option value={value} key={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </div>\n    <div className=\"form-control\">\n      <label>Experience</label>\n      <select\n        value={state.experience}\n        disabled={state.type === 'Levies'}\n        onChange={(e) =>\n          update({\n            experience: e.currentTarget.value as UnitExperience,\n          })\n        }\n      >\n        {unitExperiences.map((value) => (\n          <option value={value} key={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </div>\n    <div className=\"form-control\">\n      <label>Equipment</label>\n      <select\n        value={state.equipment}\n        disabled={state.type === 'Levies'}\n        onChange={(e) =>\n          update({\n            equipment: e.currentTarget.value as UnitEquipment,\n          })\n        }\n      >\n        {unitEquipments.map((value) => (\n          <option value={value} key={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </div>\n    <div className=\"form-control\">\n      <label>Size</label>\n      <select\n        value={state.size}\n        onChange={(e) =>\n          update({\n            size: e.currentTarget.value as UnitSize,\n          })\n        }\n      >\n        {unitSizes.map((value) => (\n          <option value={value} key={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </div>\n  </div>\n);\n","import { State } from '../App';\nimport {\n  ancestryStats,\n  experienceStats,\n  equipmentStats,\n  typeStats,\n  sizeStats,\n} from '../fixtures/unitStats';\nimport { traitData } from '../fixtures/traits';\n\nexport const attack = (state: State): number => {\n  return (\n    ancestryStats[state.ancestry].attack +\n    (state.type === 'Levies'\n      ? 0\n      : experienceStats[state.experience].attack +\n        equipmentStats[state.equipment].attack) +\n    typeStats[state.type].attack\n  );\n};\n\nexport const power = (state: State): number => {\n  return (\n    ancestryStats[state.ancestry].power +\n    (state.type === 'Levies'\n      ? 0\n      : experienceStats[state.experience].power +\n        equipmentStats[state.equipment].power) +\n    typeStats[state.type].power\n  );\n};\n\nconst defenseBase = 10;\nexport const defense = (state: State, baseless?: boolean): number => {\n  return (\n    (!baseless ? defenseBase : 0) +\n    ancestryStats[state.ancestry].defense +\n    (state.type === 'Levies'\n      ? 0\n      : experienceStats[state.experience].defense +\n        equipmentStats[state.equipment].defense) +\n    typeStats[state.type].defense\n  );\n};\n\nconst toughnessBase = 10;\nexport const toughness = (state: State, baseless?: boolean): number => {\n  return (\n    (!baseless ? toughnessBase : 0) +\n    ancestryStats[state.ancestry].toughness +\n    (state.type === 'Levies'\n      ? 0\n      : experienceStats[state.experience].toughness +\n        equipmentStats[state.equipment].toughness) +\n    typeStats[state.type].toughness\n  );\n};\n\nexport const morale = (state: State): number => {\n  return (\n    ancestryStats[state.ancestry].morale +\n    (state.type === 'Levies'\n      ? 0\n      : experienceStats[state.experience].morale +\n        equipmentStats[state.equipment].morale) +\n    typeStats[state.type].morale\n  );\n};\n\nexport const cost = (state: State): number => {\n  let cost =\n    attack(state) +\n    power(state) +\n    defense(state, true) +\n    toughness(state, true) +\n    morale(state) * 2;\n\n  cost = cost * typeStats[state.type].costMultiplier;\n  cost = cost * sizeStats[state.size].costMultiplier;\n  cost = cost * 10;\n  ancestryStats[state.ancestry].traits.forEach((traitName) => {\n    const trait = traitData.find((data) => data.name === traitName);\n    cost += trait ? trait.cost : 0;\n  });\n  cost += 30;\n\n  return Math.round(cost);\n};\n","import React, { Component } from 'react';\nimport { Card } from './components/Card/Card';\nimport {\n  UnitAncestry,\n  UnitType,\n  UnitExperience,\n  UnitEquipment,\n  UnitSize,\n  CardData,\n} from './types/units';\nimport { StatForm } from './components/StatForm/StatForm';\nimport {\n  attack,\n  defense,\n  power,\n  toughness,\n  morale,\n  cost,\n} from './utils/statCalculator';\n\nexport interface State {\n  name: string;\n  ancestry: UnitAncestry;\n  type: UnitType;\n  experience: UnitExperience;\n  equipment: UnitEquipment;\n  size: UnitSize;\n}\n\nclass App extends Component<{}, State> {\n  state = {\n    name: 'Unit Name',\n    ancestry: 'Human' as UnitAncestry,\n    type: 'Infantry' as UnitType,\n    experience: 'Regular' as UnitExperience,\n    equipment: 'Medium' as UnitEquipment,\n    size: 'd6' as UnitSize,\n  };\n\n  cardData = (): CardData => {\n    return {\n      ...this.state,\n      attack: attack(this.state),\n      defense: defense(this.state),\n      power: power(this.state),\n      toughness: toughness(this.state),\n      morale: morale(this.state),\n      cost: cost(this.state),\n    };\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <StatForm\n          state={this.state}\n          update={(state) => this.setState(state as State)}\n        />\n        <Card cardData={this.cardData()} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}